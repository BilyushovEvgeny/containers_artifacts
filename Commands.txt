#challenge one

docker network create testing

docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Qq123456" -p 1433:1433 --name sql1 --network testing -d mcr.microsoft.com/mssql/server:2017-latest

docker exec -it sql1 "bash"
/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "Qq123456"
CREATE DATABASE mydrivingDB
GO

docker login registrympx1704.azurecr.io
docker run --network testing -e SQLFQDN=sql1 -e SQLUSER=sa -e SQLPASS=Qq123456 -e SQLDB=mydrivingDB registrympx1704.azurecr.io/dataload:1.0

#Use Dockervile_3
docker pull https://github.com/BilyushovEvgeny/containers_artifacts.git
docker build -f Dockerfile -t "tripinsights/poi:1.0" .

# To rum
docker run -d -p 80:80 -e "SQL_USER=sa" -e "SQL_PASSWORD=Qq123456" -e "SQL_SERVER=sql1" -e "SQL_DBNAME=mydrivingDB" -e "ASPNETCORE_ENVIRONMENT=Local" --network testing tripinsights/poi:1.0

curl http://localhost:8080/api/poi/healthcheck

docker tag tripinsights/poi:1.0 registrympx1704.azurecr.io/poi:1.0
docker push registrympx1704.azurecr.io/poi:1.0

docker tag tripinsights/tripviewer:1.0 registrympx1704.azurecr.io/tripviewer:1.0
docker push registrympx1704.azurecr.io/tripviewer:1.0

docker tag tripinsights/userprofile:1.0 registrympx1704.azurecr.io/userprofile:1.0
docker push registrympx1704.azurecr.io/userprofile:1.0

docker tag tripinsights/user-java:1.0 registrympx1704.azurecr.io/user-java:1.0
docker push registrympx1704.azurecr.io/user-java:1.0

docker tag tripinsights/trips:1.0 registrympx1704.azurecr.io/trips:1.0
docker push registrympx1704.azurecr.io/trips:1.0

#challenge two
az login
az aks create --zonez 1 2 3 --resource-group teamResources --name OHAKS --node-count 3 --enable-addons monitoring --generate-ssh-keys --attach-acr registrympx1704
az aks get-credentials --resource-group teamResources --name OHAKS

az aks get-credentials --name ohaks --resource-group teamresources --admin

#Create deployment
kubectl apply -f secret.yaml

kubectl apply -f poi-deployments.yaml
kubectl apply -f poi-deployments.yaml
kubectl apply -f poi-deployments.yaml
kubectl apply -f poi-deployments.yaml
kubectl apply -f poi-deployments.yaml
kubectl get po
kubect get svc
kubectl get svc
kubectl port-forward poi-deployment-676c87b946-jf5sp 8080:80
kubectl log poi-deployment-676c87b946-jf5sp -tail 20
kubectl logs poi-deployment-676c87b946-jf5sp -tail 20
kubectl logs poi-deployment-676c87b946-jf5sp -t 20
kubectl logs poi-deployment-676c87b946-jf5sp 
kubect get secret
kubectl get secret
kubectl apply -f secret.yaml 
kubectl delete poi-deployment-676c87b946-jf5sp
kubectl delete po poi-deployment-676c87b946-jf5sp
kubectl get deployment
kubectl get po
kubectl port-forward poi-deployment-676c87b946-nff26 8080:80

#challenge 4
az aks get-credentials --name openhack --resource-group teamresources --admin

# getting vnet subnet id for az aks create --vnet-subnet-id
az network vnet subnet list --resource-group teamResources --vnet-name vnet



#web dev
az role assignment create --assignee f3e39972-ae2d-4e31-bf52-14844207149c --role "Azure Kubernetes Service Cluster User Role" --scope "/subscriptions/748641e6-eaf9-4a8e-8562-913deb6f5079/resourcegroups/teamResources/providers/Microsoft.ContainerService/managedClusters/OPENHACK"
#api dev
az role assignment create --assignee a3509ca9-d38b-4245-9d85-d4035d7a7daa --role "Azure Kubernetes Service Cluster User Role" --scope "/subscriptions/748641e6-eaf9-4a8e-8562-913deb6f5079/resourcegroups/teamResources/providers/Microsoft.ContainerService/managedClusters/OPENHACK"

 kubectl exec -it trips-deployment-5bb856899b-gzn7f -n api -- ls
 kubectl exec -it trips-deployment-5bb856899b-gzn7f -n api -- ls /etc
 kubectl exec -it trips-deployment-5bb856899b-gzn7f -n api -- cat /etc/resolv.conf 

kubectl delete rolebinding -n web web-user-access

 kubectl exec -it poi-deployment-676c87b946-qzxvt -n api -- ping 20.107.168.54
 
#keyvault
az keyvault create -n ohteam1keyvault -g teamResources -l northeurope

az keyvault secret set --vault-name ohteam1keyvault -n "SQL-USER" --value sqladminmPx1704
az keyvault secret set --vault-name ohteam1keyvault -n "SQL-PASSWORD" --value lB7aj5Nr6
az keyvault secret set --vault-name ohteam1keyvault -n "SQL-SERVER" --value sqlservermpx1704.database.windows.net
az keyvault secret set --vault-name ohteam1keyvault -n "SQL-DBNAME" --value mydrivingDB


az aks enable-addons --addons azure-keyvault-secrets-provider --name OPENHACK --resource-group teamResources

az aks show -g teamResources -n OPENHACK --query identityProfile.kubeletidentity.clientId -o tsv
//8fab96af-70cf-4f20-a867-4903905fddf2

az aks show -g teamResources -n OPENHACK --query addonProfiles.azureKeyvaultSecretsProvider.identity.clientId -o tsv
// e393d4d7-693e-43bb-8c53-9ebf6d6426d9

# set policy to access keys in your key vault
//az keyvault set-policy -n ohteam1keyvault --key-permissions get --spn e393d4d7-693e-43bb-8c53-9ebf6d6426d9
# set policy to access secrets in your key vault
az keyvault set-policy -n ohteam1keyvault --secret-permissions get --spn e393d4d7-693e-43bb-8c53-9ebf6d6426d9
# set policy to access certs in your key vault
//az keyvault set-policy -n ohteam1keyvault --certificate-permissions get --spn e393d4d7-693e-43bb-8c53-9ebf6d6426d9

kubectl apply -f .\deployments\secret-service-provider.yaml

kubectl apply -f .\deployments\deployment-poi.yaml

kubectl port-forward poi-deployment-5b474755ff-rq6xl 8080:80 -n api

kubectl -n api exec -it poi-deployment-5b474755ff-rq6xl -- sh
cat /mnt/secrets-store/SQL_USER

kubectl logs poi-deployment-5b474755ff-rq6xl -n api

#list secrets from api namespace in yaml
kubectl get secrets environmentsecrets -n api -o yaml

# default rotation interval is 2 minutes
az aks update -g teamResources -n openhack --enable-secret-rotation